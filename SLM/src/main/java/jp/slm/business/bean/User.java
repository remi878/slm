package jp.slm.business.bean;

// Generated 22 janv. 2014 15:00:53 by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import jp.slm.business.bean.generic.GenericLongIdBean;
import jp.slm.common.util.PasswordEncoderHolder;
import jp.slm.web.form.UserRegistrationForm;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

/**
 * User generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "user")
public class User extends GenericLongIdBean implements UserDetails {
	
	@Transient
	public static final String ADMIN_ROLE_STR = "ROLE_ADMIN";
	
	@Transient
	public static final GrantedAuthority ADMIN_ROLE = new SimpleGrantedAuthority(ADMIN_ROLE_STR);
	
	@Transient
	public static final String ARTIST_ROLE_STR = "ROLE_ARTIST";
	
	@Transient
	public static final GrantedAuthority ARTIST_ROLE = new SimpleGrantedAuthority(ARTIST_ROLE_STR);
	
	@Transient
	public static final String FAN_ROLE_STR = "ROLE_FAN";
	
	@Transient
	public static final GrantedAuthority FAN_ROLE = new SimpleGrantedAuthority(FAN_ROLE_STR);
	
	@Transient
	public static final List<GrantedAuthority> ROLE_LIST = Arrays.asList(FAN_ROLE, ARTIST_ROLE, ADMIN_ROLE);
	
	private Avatar avatar;
	
	private String email;
	
	private String password;
	
	private boolean enabled;
	
	private String authToken;
	
	private boolean pwdReset;
	
	private boolean admin;
	
	private Date creationDate;
	
	private Date lastLogin;
	
	private String firstName;
	
	private String lastName;
	
	private Boolean gender;
	
	private Date birthdate;
	
	private String nickname;
	
	private String description;
	
	private String websiteUrl;
	
	public User() {}
	
	public User(UserRegistrationForm urf) {
		this.email = urf.getEmail();
		setUncryptedPassword(urf.getPassword());
		this.creationDate = new Date();
		this.firstName = urf.getFirstName();
		this.lastName = urf.getLastName();
		this.gender = urf.getGender();
		this.birthdate = urf.getBirthdate();
		this.nickname = urf.getNickname();
		this.description = urf.getDescription();
		this.websiteUrl = urf.getWebsiteUrl();
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_avatar")
	public Avatar getAvatar() {
		return this.avatar;
	}
	
	public void setAvatar(Avatar avatar) {
		this.avatar = avatar;
	}
	
	@Column(name = "email", nullable = false, length = 64)
	public String getEmail() {
		return this.email;
	}
	
	public void setEmail(String email) {
		this.email = email;
	}
	
	@Column(name = "password", nullable = false, length = 45)
	public String getPassword() {
		return this.password;
	}
	
	public void setPassword(String password) {
		this.password = password;
	}
	
	@Transient
	public void setUncryptedPassword(String password) {
		password = PasswordEncoderHolder.getPasswordEncoder().encode(password);
		this.password = password;
	}
	
	@Column(name = "is_enabled", nullable = false)
	public boolean isEnabled() {
		return this.enabled;
	}
	
	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}
	
	@Column(name = "auth_token", length = 45)
	public String getAuthToken() {
		return this.authToken;
	}
	
	public void setAuthToken(String authToken) {
		this.authToken = authToken;
	}
	
	@Column(name = "pwd_reset", nullable = false)
	public boolean isPwdReset() {
		return this.pwdReset;
	}
	
	public void setPwdReset(boolean pwdReset) {
		this.pwdReset = pwdReset;
	}
	
	@Column(name = "is_admin", nullable = false)
	public boolean isAdmin() {
		return this.admin;
	}
	
	public void setAdmin(boolean admin) {
		this.admin = admin;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "creation_date", nullable = false, length = 10)
	public Date getCreationDate() {
		return this.creationDate;
	}
	
	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "last_login", length = 10)
	public Date getLastLogin() {
		return this.lastLogin;
	}
	
	public void setLastLogin(Date lastLogin) {
		this.lastLogin = lastLogin;
	}
	
	@Column(name = "first_name", nullable = false, length = 64)
	public String getFirstName() {
		return this.firstName;
	}
	
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	
	@Column(name = "last_name", nullable = false, length = 64)
	public String getLastName() {
		return this.lastName;
	}
	
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	
	@Column(name = "gender")
	public Boolean getGender() {
		return this.gender;
	}
	
	public void setGender(Boolean gender) {
		this.gender = gender;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "birthdate", length = 10)
	public Date getBirthdate() {
		return this.birthdate;
	}
	
	public void setBirthdate(Date birthdate) {
		this.birthdate = birthdate;
	}
	
	@Column(name = "nickname", length = 32)
	public String getNickname() {
		return this.nickname;
	}
	
	public void setNickname(String nickname) {
		this.nickname = nickname;
	}
	
	@Column(name = "description", length = 512)
	public String getDescription() {
		return this.description;
	}
	
	public void setDescription(String description) {
		this.description = description;
	}
	
	@Column(name = "website_url", nullable = false, length = 64)
	public String getWebsiteUrl() {
		return this.websiteUrl;
	}
	
	public void setWebsiteUrl(String websiteUrl) {
		this.websiteUrl = websiteUrl;
	}
	
	@Transient
	@Override
	public Collection<GrantedAuthority> getAuthorities() {
		List<GrantedAuthority> roleList = new ArrayList<GrantedAuthority>();
		if (isAdmin()) {
			roleList.add(ADMIN_ROLE);
		}
		return roleList;
	}
	
	@Transient
	@Override
	public String getUsername() {
		return getEmail();
	}
	
	@Transient
	@Override
	public boolean isAccountNonExpired() {
		return true;
	}
	
	@Transient
	@Override
	public boolean isAccountNonLocked() {
		return true;
	}
	
	@Transient
	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}
}
